@model WebApplication2.Models.BOOK_EDITION

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    int editionPrice = Convert.ToInt32(Model.EditionPrice);
}

<h2>Edit</h2>


@using (Html.BeginForm("Edit", "BOOK_EDITION", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>BOOK_EDITION</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.EditionID)

        <div class="form-group">
            @Html.LabelFor(model => model.EditionPrice, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => editionPrice, new { htmlAttributes = new { @class = "form-control", oninput = "this.value = this.value.slice(0, 18)" } })
                @Html.ValidationMessageFor(model => model.EditionPrice, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EditionDescription, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EditionDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EditionDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EditionYear, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EditionYear, new { htmlAttributes = new { @class = "form-control", type = "number", oninput = "this.value = this.value.slice(0, 4)" } })
                @Html.ValidationMessageFor(model => model.EditionYear, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EditionPageCount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EditionPageCount, new { htmlAttributes = new { @class = "form-control", type = "number", oninput = "this.value = this.value.slice(0, 4)" } })
                @Html.ValidationMessageFor(model => model.EditionPageCount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EditionName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EditionName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EditionName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EditionAuthor, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.EditionAuthor, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EditionAuthor, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.BookCollectionID, "BookCollectionID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("BookCollectionID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.BookCollectionID, "", new { @class = "text-danger" })
            </div>
        </div>
        @if (ViewBag.CategoryList.Count > 0)
        {
            <div class="form-group">
                <div>Category</div>
                @foreach (var c in ViewBag.CategoryList)
                {
                    if (ViewBag.SelectedCategoryList != null  && ViewBag.SelectedCategoryList.Contains(c.CategoryID.ToString()))
                    {
                        <input checked="checked" type="checkbox" id="@c.CategoryID" name="@c.CategoryID" value="@c.CategoryID" />
                        <label for="@c.CategoryID">@c.CategoryName.</label>
                    }
                    else
                    {
                        <input type="checkbox" id="@c.CategoryID" name="@c.CategoryID" value="@c.CategoryID" />
                        <label for="@c.CategoryID">@c.CategoryName.</label>
                    }
                }

            </div>
        }


        <div class="form-group">
            <label for="imageUpload">Select multiple images:</label>
            <input type="file" name="imageUpload" id="imageUpload" multiple accept="image/*">
        </div>

        <div id="preview"></div>


        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Save" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        var imageUpload = document.getElementById('imageUpload');
        var event = new Event('change', {
            bubbles: true,
            cancelable: true
        });
        imageUpload.dispatchEvent(event);
    });


    document.getElementById('imageUpload').addEventListener('change', function () {
        var preview = document.getElementById('preview');
        preview.innerHTML = '';
        var files = this.files;
        if (files.length === 0) {
            image_name_list = @Html.Raw(Json.Encode(ViewBag.images));
            for (var i = 0; i < image_name_list.length; i++) {
                var name = image_name_list[i];
                var img = document.createElement("img");
                img.src = "/Images/" + name;
                console.log(img.src);
                img.style.width = '50%';
                img.style.height = '50%';
                preview.appendChild(img);
            }

        } else {
            for (var i = 0; i < files.length; i++) {

                var file = files[i];
                var reader = new FileReader();
                reader.onload = function () {
                    var img = document.createElement('img');
                    img.src = this.result;
                    img.style.width = '50%';
                    img.style.height = '50%';
                    preview.appendChild(img);
                }
                reader.readAsDataURL(file);
            }
        }


    });
</script>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
